openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Person
    description: Api generates data for person
  - name: Member
    description: Api generates data for member
  - name: Role
    description: Api generates data for role
  - name: Policies
paths:
  /v1/people/males:
    get:
      tags:
        - Person
      operationId: getAllMales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
  /v1/people/males/addresses:
    get:
      tags:
        - Person
      operationId: getAllMalesWithAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDTO'
  /v1/people/save:
    post:
      tags:
        - Person
      operationId: savePerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonDTO"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/PersonDTO"
  /v1/members/save:
    post:
      tags:
        - Member
      operationId: saveMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberDTO"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
  /v1/members/id/{id}:
    get:
      tags:
        - Member
      operationId: getById
      parameters:
        - name: id
          in: path
          description: Id of a member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /v1/members/start/{date}:
    get:
      tags:
        - Member
      operationId: getByMembershipStartDate
      parameters:
        - name: date
          in: path
          description: Start date of membership
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /v1/members/after/{date}:
    get:
      tags:
        - Member
      operationId: getByMembershipAfterDate
      parameters:
        - name: date
          in: path
          description: After Start date of membership
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /v1/members/before/{date}:
    get:
      tags:
        - Member
      operationId: getByMembershipBeforeDate
      parameters:
        - name: date
          in: path
          description: Before date of membership
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /v1/members/{status}:
    get:
      tags:
        - Member
      operationId: getByStatus
      parameters:
        - name: status
          in: path
          description: Status of membership
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /v1/roles:
    get:
      tags:
        - Role
      operationId: getAllRoles
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDTO"
  /v1/roles/{memberId}:
    get:
      tags:
        - Role
      operationId: getAllRolesByMember
      parameters:
        - name: memberId
          in: path
          description: Id of a member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDTO"
  /v1/roles/save:
    post:
      tags:
        - Role
      operationId: saveRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleDTO"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
  /v1/roles/saveAll:
    post:
      tags:
        - Role
      operationId: saveAllRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RoleDTO"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    AddressDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        province:
          type: string
        city:
          type: string
        streetName:
          type: string

    PersonDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        dob:
          type: string
          format: date
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressDTO'
        anniversaryDate:
          type: string
          format: date

    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleValue:
          type: string
          enum:
            - PASTOR
            - ELDER
            - DEACON

    MemberDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        membershipDate:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
        status:
          type: string
        personDTO:
          type: object
          $ref: "#/components/schemas/PersonDTO"